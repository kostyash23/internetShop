generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  email    String @unique
  password String

  isAdmin Boolean @default(false) @map("is_admin") // Поле isAdmin визначене правильно

  name       String @unique
  avatarPath String @default("/uploads/default-avatar.png") @map("avatar_path")

  phone     String    @default("")
  orders    Order[]
  reviews   Review[]
  favorites Product[]
}


model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  orderItems OrderItem[]
  reviews    Review[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  rating Int
  text   String

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]
  total Int

  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
  reviews Review[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  quantity Int
  price    Int

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?     @map("order_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
